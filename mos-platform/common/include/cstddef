#ifndef _CSTDDEF_
#define _CSTDDEF_
#include <stddef.h>
#include <__type-traits-impl.h>

namespace std {
using size_t = ::size_t;
using ptrdiff_t = ::ptrdiff_t;
using max_align_t = ::max_align_t;
using nullptr_t = decltype(nullptr);

enum class byte : unsigned char {};

constexpr byte operator|(byte l, byte r) noexcept {
  return byte(static_cast<unsigned int>(l) | static_cast<unsigned int>(r));
}

constexpr byte operator&(byte l, byte r) noexcept {
  return byte(static_cast<unsigned int>(l) & static_cast<unsigned int>(r));
}

constexpr byte operator^(byte l, byte r) noexcept {
  return byte(static_cast<unsigned int>(l) ^ static_cast<unsigned int>(r));
}

constexpr byte operator~(byte b) noexcept {
  return byte(~static_cast<unsigned int>(b));
}

constexpr byte &operator|=(byte &l, byte r) noexcept { return l = l | r; }

constexpr byte &operator&=(byte &l, byte r) noexcept { return l = l & r; }

constexpr byte &operator^=(byte &l, byte r) noexcept { return l = l ^ r; }

template <class IntegerType>
constexpr enable_if_t<is_integral<IntegerType>::value, IntegerType>
to_integer(byte b) noexcept {
  return IntegerType(b);
}

template <class IntegerType>
constexpr enable_if_t<is_integral<IntegerType>::value, byte>
operator<<(byte b, IntegerType shift) noexcept {
  return byte(static_cast<unsigned int>(b) << shift);
}

template <class IntegerType>
constexpr enable_if_t<is_integral<IntegerType>::value, byte>
operator>>(byte b, IntegerType shift) noexcept {
  return byte(static_cast<unsigned int>(b) >> shift);
}

template <class IntegerType>
constexpr enable_if_t<is_integral<IntegerType>::value, byte &>
operator<<=(byte &b, IntegerType shift) noexcept {
  return b = b << shift;
}

template <class IntegerType>
constexpr enable_if_t<is_integral<IntegerType>::value, byte &>
operator>>=(byte &b, IntegerType shift) noexcept {
  return b = b >> shift;
}

} // namespace std

#endif // _CSTDDEF_
