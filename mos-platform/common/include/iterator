#ifndef __ITERATOR__
#define __ITERATOR__

#include <cstddef>

namespace std {

template <class C>
constexpr auto begin(C &c) -> decltype(c.begin()) {
    return c.begin();
}

template <class C>
constexpr auto begin(const C &c) -> decltype(c.begin()) {
    return c.begin();
}

template <class T, std::size_t _N>
constexpr T* begin(T (&array)[_N]) noexcept {
    return array;
}

template <class C>
constexpr auto cbegin(const C &c) noexcept(noexcept(std::begin(c))) -> decltype(c.begin()) {
    return c.begin();
}

template <class C>
constexpr auto end(C &c) -> decltype(c.end()) {
    return c.end();
}

template <class C>
constexpr auto end(const C &c) -> decltype(c.end()) {
    return c.end();
}

template <class T, std::size_t _N>
constexpr T* end(T (&array)[_N]) noexcept {
    return array + _N;
}

template <class C>
constexpr auto cend(const C &c) noexcept(noexcept(std::end(c))) -> decltype(c.end()) {
    return c.end();
}

}

#endif // __ITERATOR__
