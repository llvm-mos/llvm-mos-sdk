#ifndef __NEW_H__
#define __NEW_H__

#include <cstddef>

namespace std
{
struct nothrow_t
{
    explicit nothrow_t() = default;
};

extern const nothrow_t nothrow;

typedef void (*new_handler)();

new_handler get_new_handler() noexcept;
new_handler set_new_handler(new_handler new_p) noexcept;

}

void * operator new(std::size_t size);
void * operator new[](std::size_t size);
void * operator new(std::size_t count, const std::nothrow_t &tag);
void * operator new[](std::size_t count, const std::nothrow_t &tag);
void * operator new(std::size_t count, void *ptr);
void * operator new[](std::size_t count, void *ptr);
void operator delete(void *ptr) noexcept;
void operator delete[](void *ptr) noexcept;

std::size_t heap_bytes_used();
std::size_t heap_bytes_free();
#endif
