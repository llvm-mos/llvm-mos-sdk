#ifndef _TYPE_TRAITS_
#define _TYPE_TRAITS_

namespace std {

template <class T, T v> struct integral_constant {
  static constexpr T value = v;
  using value_type = T;
  using type = integral_constant;
  constexpr operator value_type() const noexcept { return value; }
  constexpr value_type operator()() const noexcept { return value; }
};

template <bool B> using bool_constant = integral_constant<bool, B>;

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

template <class T> struct is_integral : false_type {};

template <> struct is_integral<bool> : true_type {};

template <> struct is_integral<char> : true_type {};

template <> struct is_integral<unsigned char> : true_type {};

template <> struct is_integral<short> : true_type {};

template <> struct is_integral<unsigned short> : true_type {};

template <> struct is_integral<int> : true_type {};

template <> struct is_integral<unsigned int> : true_type {};

template <> struct is_integral<long> : true_type {};

template <> struct is_integral<unsigned long> : true_type {};

template <bool B, class T = void> struct enable_if {};

template <class T> struct enable_if<true, T> { typedef T type; };

template <bool B, class T = void>
using enable_if_t = typename enable_if<B, T>::type;

template <class T> struct remove_cv { typedef T type; };
template <class T> struct remove_cv<const T> { typedef T type; };
template <class T> struct remove_cv<volatile T> { typedef T type; };
template <class T> struct remove_cv<const volatile T> { typedef T type; };
template <class T> using remove_cv_t = typename remove_cv<T>::type;

template <class T> struct make_unsigned;

template <> struct make_unsigned<char> { typedef unsigned char type; };
template <> struct make_unsigned<int> { typedef unsigned int type; };
template <> struct make_unsigned<long> { typedef unsigned long type; };

template <class T> using make_unsigned_t = typename make_unsigned<T>::type;

} // namespace std

#endif // _TYPE_TRAITS_
