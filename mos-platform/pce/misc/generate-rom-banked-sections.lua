-- Copyright (c) 2023 Adrian "asie" Siekierka
--
-- Licensed under the Apache License, Version 2.0 with LLVM Exceptions,                                   
-- See https://github.com/llvm-mos/llvm-mos-sdk/blob/main/LICENSE for license                             
-- information.

local BANK_MAX = 128
local BANK_KB = 8

function printf(...)
	print(string.format(table.unpack({...})))
end

print("/* Automatically generated by generate-rom-banked-sections.lua. */\n")

-- for each bank, define "offset", "size"
-- bank 0 - fixed 8KB bank at $E000
printf("__rom_0 = 0xe000;")
printf("__rom_0_size = 0x2000;")
printf("__rom_0_offset = 0;")
for i = 1,BANK_MAX-1 do
	printf("PROVIDE(__rom_%d = 0xc000);", i)
	printf("PROVIDE(__rom_%d_size = 0);", i)
	printf("__rom_%d_offset = __rom_%d_offset + __rom_%d_size;", i, i-1, i-1)
end
for i = 0,BANK_MAX-1 do
	printf("__rom_%d_bank = __rom_%d_offset >> 13;", i, i)
	printf("__rom_%d_lma = 0x01000000 + (__rom_%d_bank << 16) + __rom_%d;", i, i, i)
end

printf("__rom_end_offset = __rom_%d_offset + __rom_%d_size;", BANK_MAX-1, BANK_MAX-1);
printf("ASSERT(__rom_end_offset <= %d, \"ROM size cannot be larger than %d KB.\");", BANK_MAX*BANK_KB*1024, BANK_MAX*BANK_KB)

-- define memory sections
printf("")
printf("MEMORY {")
for i = 0,BANK_MAX-1 do
	printf("  rom_%d : ORIGIN = __rom_%d_lma, LENGTH = __rom_%d_size", i, i, i)
end
printf("}")

printf("")
printf("SECTIONS {")
for i = 0,BANK_MAX-1 do
	printf("  .vbank_%d : { *(.vbank_%d .vbank_%d.*) } >rom_%d", i, i, i, i)
end
printf("}")

printf("")
printf("OUTPUT_FORMAT {")
for i = 0,BANK_MAX-1 do
	printf("  FULL(rom_%d)", i)
end
printf("}")
